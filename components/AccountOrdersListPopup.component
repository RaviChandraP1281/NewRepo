<!-- 
    AccountOrdersListPopup contains logic for popup dialogs in the AccountOrdersList page.
    It dynamically fetches values for the order line items from OrderLineItemController method 
    getOrderLineItems( orderPoid ).
-->
<apex:component controller="AccountOrdersPopupController">
<apex:attribute name="can" type="String" required="true"  
    description="The Customer Account Number (can) of the account.  Required for this component to function." 
/>
<apex:stylesheet value="{!$Resource.BillingHistoryListCSS}"/>
<apex:stylesheet value="{!URLFOR($Resource.JQueryDataTablesZip, 'DataTables/css/jquery.dataTables.min.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.treeviewGrid2983,    'css/easyui.css')}"/>    
<apex:includeScript value="{!URLFOR($Resource.treeviewGrid2983,    'jquery.min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.JQueryDataTablesZip, 'DataTables/jquery.dataTables.min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.JQueryDataTablesZip, 'DataTables/moment.min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.JQueryDataTablesZip, 'DataTables/datetime-moment.js')}" />
<apex:includeScript value="{!URLFOR($Resource.treeviewGrid2983,    'jquery.easyui.min.js')}" />
<!-- DMD 5/9/2016 - adding jQueryUI for popup dialog --> 
<apex:includeScript value="{!URLFOR($Resource.jquery_ui_1_10_4,    'jquery-ui-1.10.4.custom/js/jquery-ui-1.10.4.custom.js')}" />
<apex:includeScript value="/support/console/28.0/integration.js" />
<apex:includeScript value="{!$Resource.jquery_clickoutside}" />


<!-- ********************************** CSS stylesheets ****************************************-->

<style>
        td.licenseNumberTd a, td.orderServiceAccountName a {
            color: #015ba7 !important;
            cursor: pointer;
        }
        .paymentMethodLinkError {
            color: red;
        }
        .licenseNumberFilterContainer {
            height: 15px;
            background-color: #9fef9f; 
            border: 1px solid green;
            margin: 0 0 0 30px;
            padding: 4px;
            cursor: pointer;
            xfloat: left;
        }
        .licenseNumberFilter {
            margin-left: 5px;
            xfloat: left;
            xtext-align: left;
            xborder: 1px solid blue;
        }
        .licenseNumberFilter span {
            float: right;
            margin: 0 5px 0 10px;
            font-weight: bold;
        }
        .licenseNumberSearchContainer {
            width: 500px;
            border: 1px solid red;
            margin: 0 20px 0 20px;
        }
        .show {
            display: block;
        }
        .hide {
            display: none;
        }
        .showLicenseNumberSearchDialog {
            cursor: pointer;
            margin-left: 30px;
        }
        a.licenseNumber {
            cursor: pointer;
            color: #015ba7;
        }
        .licenseNumberSearchDialogContainer, .licenseNumberSearchDialogMainContainer {
            background-color: transparent;
        }
        .licenseNumberSearchDialogInnerContainer { 
            background-color: transparent; 
            z-index:10;
        }
        .licenseNumberSearchDialog {
            background-color: transparent;
            z-index:30; 
            opacity:1.0; 
            position:absolute; 
            display:none;
            border-radius: 3px;
        }
        .licenseNumberSearchDialogLabel {
            font-size: 14px;
            font-weight: bold;
            margin: 5px 0 20px 0;
        }
        .licenseNumberSearchDialogInner {
            padding: 10px;
            background-color: white; 
            border-left: 1px solid black;
            border-top: 1px solid black;
            border-bottom: 1px solid black;
            border-radius: 3px 0 0 3px;
            z-index:10; 
            display: block;
        }
        .licenseNumberSearchButton {
            margin: 5px;
            padding: 3px;
        }
        .licenseNumberSearchButtonWrapper {
            margin: 10px;
        }
        .licenseNumberSearchDialogError {
            color: #aa2222;
            font-style: italic;
            font-weight: bold;
            padding: 10px;
        }
        .dialogDisplay {
            display:block;
        }
        .dialogHide {
            display:none;
        }
        .licenseNumberSearchContainer {
            margin: 0 0 0 300px;
        }
        /* filterMatches for search match highlighting */
        .filterMatches { background-color: #FFFF00; }    
        .relatedMatches { background-color: #d8e2f4 !important; } 
        
        .leftArmGray {
            width: 24px !important;
            min-width: 24px;
            background: url({!URLFOR($Resource.AccountOrdersListPopup, 'hover_lookup_tl_gray.png')}) no-repeat 0px 0px;
        }
        .leftArmWhite {
            width: 24px !important;
            min-width: 24px;
            background: url({!URLFOR($Resource.AccountOrdersListPopup, 'hover_lookup_tl_white.png')}) no-repeat 0px 0px;
        }
        .rightArmGray {
            width: 24px !important;
            min-width: 24px;
            background: url({!URLFOR($Resource.AccountOrdersListPopup, 'hover_lookup_tr_gray.png')}) no-repeat 0px 0px;
        }
        .rightArmWhite, td.rightArmWhite {
            width: 24px !important;
            min-width: 24px;
            background: url({!URLFOR($Resource.AccountOrdersListPopup, 'hover_lookup_tr_white.png')}) no-repeat 0px 0px;
            xborder: 1px solid blue;
        }
        div.datagrid-footer {
            max-width: 1200px !important;
            display: none;
        }
        .orderItemTableContainer {
            float:left; 
            width:90%; 
            padding:0; 
            background-color:white;
            border-top: 1px solid black; 
            border-right: 1px solid black; 
            border-top: 1px solid black; 
            border-bottom: 1px solid black; 
            border-left: 1px solid white; 
            border-radius: 0 3px 3px 0;
        }
        .orderLineItemDialogSpinner {
            height:80px; 
            width:100%; 
            background-color: #D6D6D2; 
            z-index:11; 
            opacity:0.8; 
            position:relative; 
            display:none; 
            text-align:center; 
            float:left; 
            border-top: 1px solid black; 
            border-right: 1px solid black; 
            border-top: 1px solid black; 
            border-bottom: 1px solid black; 
            border-left: 1px solid #D6D6D2; 
            border-radius: 0 3px 3px 0;
        }
        #filterAssetId::-webkit-input-placeholder { /* WebKit browsers */
            font-style: italic;
        }
        #filterAssetId:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
            font-style: italic;
        }
        #filterAssetId::-moz-placeholder { /* Mozilla Firefox 19+ */
            font-style: italic;
        }
        #filterAssetId:-ms-input-placeholder { /* Internet Explorer 10+ */
            font-style: italic;
        }
        .hidden {
            display: none;
            visibility: hidden;
        }
        .visible {
            display: inline-block;
            visibility: visible;
        }
        .popup-class {
            display: none; 
            position: absolute; 
            background-color: white; 
            border: 2px solid grey; 
            border-radius: 10px;
            border-top: 5px;
            padding-bottom: 10px;
        }
        .popup-top-border {
            border-top: 3px solid;
            border-left: 0px;
            border-right: 0px;
            border-bottom: 0px;
            border-color: #236FBD;
            border-radius: 10px;
            width: 98%;
            margin-left: 4px;
        }
        .arrow-left {
            width: 0; 
            height: 0;
            display: none; 
            border-top: 15px solid transparent;
            border-bottom: 15px solid transparent; 
            border-right:20px solid grey; 
            position: absolute;
        }
        .arrow-left-inner {
            width: 0; 
            height: 0; 
            display: none; 
            border-top: 15px solid transparent;
            border-bottom: 15px solid transparent;             
            border-right:20px solid white; 
            position: absolute;
        }
        
        .img-wrap {
            position: relative;
            display: inline-block;
            font-size: 0;
        }
        .img-wrap .close {
            position: absolute;
            top: -28px;
            right: -90px;
            z-index: 100;
            background-color: #FFF;
            padding: 5px 2px 2px;
            color: #720B00;
            font-weight: bold;
            cursor: pointer;
            text-align: center;
            font-size: 22px;
            line-height: 10px;
            border-radius: 50%;
        }
        .img-wrap .close2 {
            position: absolute;
            top: -2px;
            right: -0px;
            z-index: 100;
            background-color: #FFF;
            padding: 5px 2px 2px;
            color: #720B00;
            font-weight: bold;
            cursor: pointer;
            text-align: center;
            font-size: 22px;
            line-height: 10px;
            border-radius: 50%;
        }
        .arrow-up {
            width: 0; 
            height: 0;
            display: none; 
            border-left: 15px solid transparent;
            border-right: 15px solid transparent; 
            border-bottom:20px solid grey; 
            position: absolute;
        }
        .arrow-up-inner {
            width: 0; 
            height: 0; 
            display: none; 
            border-left: 15px solid transparent;
            border-right: 15px solid transparent;             
            border-bottom:20px solid white; 
            position: absolute;
        }
        .arrow-down {
            width: 0; 
            height: 0;
            display: none; 
            border-left: 15px solid transparent;
            border-right: 15px solid transparent; 
            border-top:20px solid grey; 
            position: absolute;
        }
        .arrow-down-inner {
            width: 0; 
            height: 0; 
            display: none; 
            border-left: 15px solid transparent;
            border-right: 15px solid transparent;             
            border-top:20px solid white; 
            position: absolute;
        }
        .datagrid-cell {
            white-space: normal;
            /*padding: 5px;*/
        }
        a {
            text-decoration: none !important;
        }
        a:hover {
            text-decoration: underline !important;
        }
        div.popupLabel {
            padding-left: 20px;
            display: inline-block;
            width: 40%;
        }
        div.popupLabelBold {
            padding-left: 20px;
            display: inline-block;
            font-weight: bold;
            vertical-align: top;
            width: 30%;
        }
        div.popupValueHalfRight {
            padding-left: 5px;
            display: inline-block;
            text-align: right;
            width: 40%;
        }
        
        div.popupValueHalf {
            padding-left: 2px;
            display: inline-block;
            width: 50%;
        }
        
        div.popupValueFullRight {
            padding-left: 5px;
            display: inline-block;
            text-align: right;
            width: 80%;
        }
        
        div.popupValueFull {
            padding-left: 20px;
            display: inline-block;
            width: 80%;
        }
        
        .popupHeader {
            padding-left: 20px;
            padding-right: 40px;
            padding-bottom: 5px;
            font-weight: bold;
            display: block;
        }
        .popupHeader2 {
            padding-left: 10px;
            padding-top: 10px;
            font-weight: bold;
            font-size: larger;
            display: block;
        }
        .align-right { text-align: right !important; }
        .highlight { font-weight: bold; }
        .panel-tool, .panel-title, .pagination-info, .tree-icon { display: none; }
        div.panel-header{ display: none; }
        .datagrid-header-row input {display: none;}
        
        .parentRow { background-color: white; } //RGB(197,225,234); }
        .childRow { background-color: RGB(239, 240, 245); }
        .normalRow { background-color: white; }
        .tree-collapsed {background: url({!URLFOR($Resource.AssetSearchImages)}) no-repeat -79px 0px; }
        .tree-expanded {background: url({!URLFOR($Resource.AssetSearchImages)}) no-repeat -101px 0px; }
        .panel-header, .panel-body { border-color: rgb(224, 227, 229) !important; }
        .cpc-folder {
            background: url({!URLFOR($Resource.AssetSearchImages)}) no-repeat 0px -35px; 
            display: inline-block;
            height: 16px;
            width: 20px;
            margin-left: 5px;
            margin-top: -2px;
            margin-bottom: -2px;
        }
        .loading-window {
            background-color: rgba(0, 0, 0, 0.1);
            position: absolute;
            text-align: center;
            vertical-align: middle;
            display: none;
            border: 0px solid grey; 
            border-radius: 10px;
            padding-bottom: 10px;
            z-index: 999;
        }
        .loading-icon {
            height: 100%;
            width: 100%;
            background:url('{!URLFOR($Resource.treeviewGrid2983, 'css/images/loading.gif')}') no-repeat center center;
        }
        .input-wrapper {
            padding: 3px 10px 3px 10px;
            text-align: left; 
            display: inline-block; 
            background-color: RGB(206, 238, 247); 
            width: 99%; border: solid; 
            border-width: 1px; 
            border-color: #E0E0E0
        }
        .xdatagrid-row-selected{ background-color: RGB(221, 240, 220); }
        .xdatagrid-row-over{
            background: #E3F3FF;
        }
        .tree-indent, .tree-title {display: none;}
        tr.datagrid-row td {vertical-align: middle;}
        div.datagrid-pager td {vertical-align: middle;}
        
        .asset-link { color: blue; }
        .cancel-popup, .no-migrate-popup{ 
            width: 400px;
            height: 250px;
            background-color: white;
            border: solid black;
            border-width: 1px;
            border-radius: 10px;
            z-index: 999;
            position: absolute;
            margin: auto;
            display: none;
        }
        .cancel-green-wrapper {
            display: block;
            width: 80%;
            height: 80%; 
            position: relative;
            text-align: center;
            margin-left:auto;
            margin-right:auto;
        }
            
        .no-migrate-red-wrapper {
            display: block;
            width: 80%;
            height: 40%; 
            position: relative;
            text-align: center;
            margin-left:auto;
            margin-right:auto;
        }
        .cancel-green-text {
            color: green;
            font-weight: bold;
            font-size: 18px !important;
            display: block;
            clear: right;
            width: 100%;
            text-align: center;
            vertical-align: text-top;
            position: absolute;
            top: 0px;
            padding-top: 55px;
        }
        .cancel-end-wrapper, .no-migrate-end-wrapper {
            width: 80%;
            height: 40%;
            position: relative;
            margin-left:auto;
            margin-right:auto;
        }
        .cancel-end-text {
            display: block;
            text-align: center;
            vertical-align: middle;
            font-weight: bold;
        }
        .cancel-button-wrapper, .no-migrate-button-wrapper {
            width: 100%;            
            height: 20%;
            position: relative;
            vertical-align: middle;
            text-align: center;
        }
        .cancel-button-close, .no-migrate-button-close { 
            width: 120px;
        }

        .no-migrate-red-text {
            color: red;
            font-weight: bold;
            font-size: 18px !important;
            display: block;
            clear: right;
            width: 100%;
            text-align: center;
            vertical-align: text-bottom;
            position: absolute;
            bottom: 0px;
        }
        .mask{
            z-index: 500;
            position: fixed;
            display: none; 
            background: transparent;
            height: 100%;
            width: 100%;
            top: 0px;
            left: 0px;
        }
        .no-migrate-end-text {
            display: block;
            text-align: center;
            vertical-align: middle;
            font-style: italic;
        }
    </style>
<script type="text/javascript" language="javascript">
    <apex:includeScript value="/soap/ajax/28.0/connection.js"/>
    
/* 
    Global variables. Used to retrieve data into popups. Values are populated from hidden fields in billing history table.
*/
    var orderId = -1;   // order id of the clicked row (POID).
    var orderNumber = ''; // order Number for display on tab in console mode
    var fetchedOrderId = -1;  // the order id of the row that was just fetched asynchronously (POID).
    var orderListTable; // the table containing a list of orders 

    // Column index constants: 
    // TODO: this seems out of sync, but no issues yet
    const AOL_ORDER_NUMBER_COLUMN = 0;
    const AOL_ORDER_STATUS_COLUMN = 1;
    const AOL_ORDER_TYPE_COLUMN = 2;
    const AOL_ORDER_DATE_COLUMN = 3;
    const AOL_ORDER_TOTAL_COLUMN = 4;
    const AOL_ORDER_PAYMENT_METHOD_COLUMN = 5;
    const AOL_ORDER_CONTACT_NAME_COLUMN = 6;
    const AOL_LICENSE_NUMBER_COLUMN = 7;
    const AOL_LICENSE_NUMBER_SEARCH_COLUMN = 8;
    const AOL_ORDER_SERVICE_ACCOUNT_NAME = 9;
    const AOL_ORDER_ID_COLUMN = 10;
    const AOL_BILL_PROFILE_NAME_COLUMN = 11;
    const AOL_BILL_PROFILE_CONTACT_CACI_COLUMN = 12;
    const AOL_BILL_PROFILE_CONTACT_NAME_COLUMN = 13;
    const AOL_BILL_PROFILE_CONTACT_ID_COLUMN = 14;
    const AOL_BILL_PROFILE_CONTACT_ROW_ID_COLUMN = 15;
    const AOL_BILL_PROFILE_ID_COLUMN = 16;
    const AOL_BILL_PROFILE_STATUS_COLUMN = 17;
    const AOL_PAYMENT_TERM_COLUMN = 18;
    const AOL_TOKENIZED_CC_NUMBER_COLUMN = 19;
    const AOL_BILL_PROFILE_BDOM_COLUMN = 20;
    const AOL_BILL_PROFILE_NAME_ON_CCARD_COLUMN = 21;
    const AOL_BILL_PROFILE_CCARD_TYPE_COLUMN = 22;
    const AOL_BILL_PROFILE_CCARD_EXP_YEAR_COLUMN = 23;

    const BP_TYPE_CREDIT_CARD = 'credit card';
    const BP_TYPE_EFT = 'eft';
    const BP_TYPE_INVOICE = 'invoice';
    
    // console.debug( 'AOL_ORDER_NUMBER_COLUMN = ' + AOL_ORDER_NUMBER_COLUMN + ' AOL_ORDER_DATE_COLUMN = ' + AOL_ORDER_DATE_COLUMN + ' AOL_ORDER_TOTAL_COLUMN = ' + AOL_ORDER_TOTAL_COLUMN  );
    
    popupjQuery$ = jQuery.noConflict();
    var keyupDelay = 500;
    var hoverDelay = 1000;
    var shippingWinTimeoutIn = new Object();
    var shippingWinTimeoutOut = new Object();
    var popupDialogTimeoutIn = new Object();
    var popupDialogTimeoutOut = new Object();
    var orderLineItemResult = new Object();

    // connect to API
    sforce.connection.sessionId='{!GETSESSIONID()}';
    
    function loadOrderLineItemData( orderId, offset ) {
        console.debug( "loadOrderLineItemData( '" + orderId + "' )..." );
        // var filterText = popupjQuery$("input[id*='filterAssetId']").val();
        if ( orderId == null || orderId == "" ) {
            return;
        }
        // hide the billing profile dialog box, if visible
        closeBpPopup();
        
        // console.debug( "loadOrderLineItemData show spinner..." );
        // show the spinner
        popupjQuery$("#orderLineItemDialogSpinner:hidden").show().css("display", "block");
        popupjQuery$('td#popupLeftArm').removeClass("leftArmWhite").addClass( "leftArmGray" )
        
        // set fetchedOrderId, compare when async operation is completed, to see if agent 
        // has clicked on another row or not.
        fetchedOrderId = orderId;
        // making js remoting call
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.AccountOrdersPopupController.fetchOrderLineItems}', orderId, function(result, event) {
                console.debug( "[loadOrderLineItemData] calling fetchOrderLineItems")
                if (event.status) {
                    orderLineItemResult = result;
                    console.debug( "[loadOrderLineItemData] fetchOrderLineItems ( " + event.status + " ) returned: " );
                    console.log(result);
                    
                    if ( fetchedOrderId != orderId ) {
                        console.debug( "[loadOrderLineItemData] fetched " + fetchedOrderId + " != " + orderId );
                    } else {
                        //console.debug( "[loadOrderLineItemData] " + fetchedOrderId + " == " + orderId );
                        // console.debug( "************** OK to display contents of dialog box" );
                        //console.debug( "**************" );
                        
                        popupjQuery$("#orderLineItemDialogSpinner").hide();
                        popupjQuery$("#orderLineItemDialogSpinner").css( "display", "none" );
                        popupjQuery$('td#popupLeftArm').addClass("leftArmWhite").removeClass("leftArmGray");
                        popupjQuery$("div#orderItemTableContainer:hidden").toggle();
                        
                        popupjQuery$('#orderItemTable').treegrid({
                            data: result
                        });
                        showLineItemListDialog( offset );
                    }
                    
                } else if (event.type === 'exception') {    
                    alert(event.message);
                } else {
                    alert(event.message);
                }
            }, {escape:true}
        );
    }
    
    /*  
        This method Displays the popup dialog with line items at a given offset
        so it appears near where the agent clicked
    */
    function showLineItemListDialog( offset ) {
        if ( offset == null || offset === 'undefined' ) {
            console.log( "showLineItemListDialog( offset is null! )" );
        } else {
            console.log( "showLineItemListDialog( offset.top=" + offset.top + ", offset.left=" + offset.left + " )..." );
        }
        
        console.debug( "showLineItemListDialog hide spinner..." );
        // hide the spinner
        popupjQuery$("#orderLineItemDialogSpinner").hide();
        popupjQuery$("#orderLineItemDialogSpinner").css("display", "none");
        popupjQuery$('td#popupLeftArm').addClass("leftArmWhite").removeClass("leftArmGray");

        console.debug( "showLineItemListDialog display orderItemTable..." );
        var orderItemTable = document.getElementById("#orderItemTable");
        if ( orderItemTable != null && orderItemTable !== 'undefined' ) {
            orderItemTable.style.display = "inline-block";
        }
        return;
        
        // use offset to get x,y location onscreen where link was clicked.
        if ( offset != null && offset != 'undefined' ) {
            popupjQuery$( "#orderLineItemDialogMainContainer" ).css(
            {   position : 'absolute', 
                left : offset.left,
                top  : offset.top, 
                width : '80%', 
                textAlign : 'left'
            });
        }
    }
    
    function htmlEncode(value) {
        //create a in-memory div, set it's inner text(which jQuery automatically encodes)
        //then grab the encoded contents back out.  The div never exists on the page.
        return popupjQuery$('<div/>').text(value).html();
    }
    
    function extractFirstLicense(value) {
    
        var index = value.indexOf(',');
        return value.substring(0, index);
    }
    
    function displayLicenseNumber(value) {
        // console.debug( "displayLicenseNumber('" + value + "')..." );
        if (value) {
            if (value.includes(',')) {
                return '<a href="#" class="licenseNumber" data-licenseNumbers="' + value + '" >' + extractFirstLicense(value) + ' &nbsp;+</a>';
            } else {
                return value;
            }
        } else {
            return '';
        }
    }
    
    function dedupLicenseNumbers(value) {
        if (value) {
            // split a comma-separated string
            var array = value.split(',');
            if (array.length == 1) {
                return value;
            } else {
                var licMap = new Map();
                var combined = '';
                //console.debug('Before de-dup: ' + array);
                
                for (var i = 0; i < array.length; i++) {
                    if (licMap.get(array[i]) == undefined) {
                        //console.debug('New license: ' + array[i]);
                        combined = combined.concat(array[i], ',');
                        licMap.put(array[i], array[i]);
                    }
                }
                
                //console.debug('After de-dup: ' + combined);
               
                return combined.substring(0, combined.lastIndexOf(','));
            }
        } else {
            return '';
        }
    }    
    
    popupjQuery$(document).ready(function() {

        
        // display spinner
        popupjQuery$("div .LoadingOrdersListSpinner").show();
        
        try {
        
            // start the query and build the table
            console.debug("CAN = " + popupjQuery$('#orderListId').attr("data-accountCAN"));
            
            // Note: Must add 'id' to the query, otherwise it won't get generated since we are using REST API here 
            var result = sforce.connection.query("SELECT id, ExternalId, ORDER_NUMBER__c, ORDER_DATE__c, ORDER_STATUS__c, ORDER_TYPE__c, TOTAL_AMOUNT__c, BP_PAYMENT_METHOD__c, ORDER_CONTACT_NAME__c, ORD_SERV_ACCOUNT_NAME__c, ORD_SERV_ACCOUNT_CAN__c, BILL_PROFILE_ROW_ID__c, Billing_Profile__c, BILL_PROFILE_NAME__c, Billing_Profile_Contact_CACI__c, Billing_Profile_Contact_First_Name__c, Billing_Profile_Contact_Id__c, Billing_Profile_Contact_Last_Name__c, Billing_Profile_Contact_Row_Id__c, Billing_Profile_Status__c, PAYMENT_TERM__c, Tokenized_CC_Number__c, BDOM__c, NAME_ON_CREDIT_CARD__c, CREDIT_CARD_TYPE__c, CC_EXPIRATION_YEAR__c, BP_BANK_ACCOUNT_NAME__c, Billing_Profile_Contact_Name__c, Billing_Profile_Last_Updated__c, License_Number__c from Order__x WHERE Order_Primary_Account__c = '" + popupjQuery$('#orderListId').attr("data-accountCAN") + "' order by ORDER_DATE__c DESC limit 10000");
            sforce.connection.batchSize="2000";  
            var tbody = popupjQuery$('#orderListId').find('tbody');

            var queryMore = true;
            while (queryMore) {
                var records = result.getArray("records");
                console.debug("records length -- " + records.length);
            
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    // create a table row for this Order__x record
                    var tr = popupjQuery$('<tr/>').appendTo(tbody);
                    
                    // Attach all fields in the records to the row
                    // Note: Field names are case-sensitive here since this is JavaScript.  So, get it right
                    tr.append('<td class="orderNumber orderpopper" data-orderId="' + record.Id +
                        '" data-orderNumber="' + record.ExternalId +
                        '"><a href="#" onClick="loadOrderDetails();">' +
                        htmlEncode(record.ExternalId) + '</a></td>');
                    tr.append('<td class="orderStatus">' + record.ORDER_STATUS__c + '</td>');
                    tr.append('<td class="orderType">' + record.ORDER_TYPE__c + '</td>');
                    tr.append('<td class="orderDate">' + record.ORDER_DATE__c + '</td>');
                    tr.append('<td class="orderTotal">' + record.TOTAL_AMOUNT__c + '</td>');
                    tr.append('<td class="paymentMethodLink"><a href="#" ' + 
                        'data-bpRowId="' + record.BILL_PROFILE_ROW_ID__c + '" ' +
                        'data-bpPaymentMethod="' + record.BP_PAYMENT_METHOD__c + '" ' + 
                        'data-bpBDOM="' + record.BDOM__c + '" ' +
                        'data-bpNameOnCard="' + htmlEncode(record.NAME_ON_CREDIT_CARD__c) + '" ' +
                        'data-bpCCardNumber="' + htmlEncode(record.Tokenized_CC_Number__c) + '" ' +
                        'data-bpCCardType="' + record.CREDIT_CARD_TYPE__c + '" ' +
                        'data-bpCCardExpYear="' + record.CC_EXPIRATION_YEAR__c + '" ' +
                        'data-bpContactName="' + htmlEncode(record.Billing_Profile_Contact_Name__c) + '" ' +
                        'data-bpBankAccountName="' + htmlEncode(record.BP_BANK_ACCOUNT_NAME__c) + '" ' + 
                        'data-bpLastUpdatedDate="' + record.Billing_Profile_Last_Updated__c + '" ' +
                        'data-bpStatus="' + record.Billing_Profile_Status__c + '" ' +                               
                        'onClick="showPaymentMethodDialog(this); return false;">' + 
                        record.BP_PAYMENT_METHOD__c + '</a></td>');
                    tr.append('<td class="bpopper orderPaymentMethod hidden" data-bpRowId="' + 
                        htmlEncode(record.BILL_PROFILE_ROW_ID__c) + '">' + record.BP_PAYMENT_METHOD__c + '</td>');

                    tr.append('<td class="orderContactName">' + htmlEncode(record.ORDER_CONTACT_NAME__c) + '</td>');
                    
                    var dedupLicenses = dedupLicenseNumbers(record.License_Number__c);
                    
                    tr.append('<td class="licenseNumberTd"> ' + displayLicenseNumber(dedupLicenses) + ' </td>');
                            
                    tr.append('<td class="licenseNumberSearch hidden">' + dedupLicenses + '</td>');
                    tr.append('<td class="orderServiceAccountName"><a href="#" onClick="loadAcctDetails( \'' + htmlEncode(record.ORD_SERV_ACCOUNT_CAN__c) + '\', \'' + htmlEncode(record.ORD_SERV_ACCOUNT_NAME__c) + '\' )">' + record.ORD_SERV_ACCOUNT_NAME__c + '</a></td>');
                    <!-- hidden columns for navigation only -->
                    tr.append('<td class="orderId hidden">' + record.id + '</td>');
                    tr.append('<td class="billProfileName hidden">' + record.BILL_PROFILE_NAME__c + '</td>');
                    tr.append('<td class="billProfileContactCaci hidden">' + record.Billing_Profile_Contact_CACI__c + '</td>');
                    tr.append('<td class="billProfileContactName hidden">' + record.Billing_Profile_Contact_First_Name__c + ' ' + record.Billing_Profile_Contact_Last_Name__c + '</td>');
                    tr.append('<td class="billProfileContactId hidden">' + record.Billing_Profile_Contact_Id__c + '</td>');
                    tr.append('<td class="billProfileContactRowId hidden">' + record.Billing_Profile_Contact_Row_Id__c + '</td>');
                    tr.append('<td class="billProfileId hidden">' + record.Billing_Profile__c + '</td>');
                    tr.append('<td class="billProfileStatus hidden">' + record.Billing_Profile_Status__c + '</td>');
                    tr.append('<td class="billProfilePaymentTerm hidden">' + record.PAYMENT_TERM__c + '</td>');
                    tr.append('<td class="billProfileTokenizedCCNumber hidden">' + record.Tokenized_CC_Number__c + '</td>');
                    tr.append('<td class="billProfileBdom hidden ">' + record.BDOM__c + '</td>');
                    tr.append('<td class="billProfileNameOnCCard hidden">' + record.NAME_ON_CREDIT_CARD__c + '</td>');
                    tr.append('<td class="billProfileCCardType hidden">' + record.CREDIT_CARD_TYPE__c + '</td>');
                    tr.append('<td class="billProfileCCExpYear hidden">' + record.CC_EXPIRATION_YEAR__c + '</td>');

                }
                if (result.getBoolean("done") || records.length == 0) {
                    queryMore = false;
                } else {
                    result = sforce.connection.queryMore(result.queryLocator);
                }
            }
        
        } catch (ex) {
            console.error('Error occurred: ', ex);
            alert('An error occurred and it is likely a networking issue.  Please try again.  If the problem persists, please contact system admin.');
        } finally {
            // always take down loading spinner
            popupjQuery$("div .LoadingOrdersListSpinner").hide();
        }
        
        var moveLeft = 0;
        var moveDown = 0;
    
        console.debug('Init Data Table');
    
        // 8/18/15: add control logic for DataTables
        // Use moment.js for date time sorting.  
        // See moment.js documentation at http://momentjs.com/docs/#/displaying/ if we decide to change date time format
        popupjQuery$.fn.dataTable.moment( 'DD-MMM-YYYY hh:mm:ss A' );
    
        // modify jquery.dataTables.min.css for the layout: Filter to the left and Length to the right
        // columnDefs section defines all hidden fields
        // tableTools defines single row selection
        // order defines sorting order at startup
        // fnRowCallback, currently inactive, contains code for search match highlighting
        // TODO: Column def seems out of sync, but no issues yet
        orderListTable = popupjQuery$('[id$="orderListId"]').DataTable({
            select: true,
            "columnDefs": [
                {
                    "targets": [AOL_ORDER_NUMBER_COLUMN,AOL_ORDER_STATUS_COLUMN,AOL_ORDER_TYPE_COLUMN,AOL_ORDER_DATE_COLUMN,
                        AOL_ORDER_TOTAL_COLUMN,AOL_ORDER_PAYMENT_METHOD_COLUMN,AOL_ORDER_CONTACT_NAME_COLUMN,AOL_ORDER_SERVICE_ACCOUNT_NAME
                    ],
                    "visible": true,
                    "searchable": true
                }
            ],
            tableTools: {
                "sRowSelect": "none"
            },
            "order": [[ AOL_ORDER_DATE_COLUMN, 'desc' ]],
            "initComplete" : function( settings, json ) { console.debug( "DataTable.initComplete event fired" ); initializePopupHoverLinks(); }, 
            "xhr" : function( e, settings, json, xhr ) { console.debug( "DataTable.xhr event fired" ); initializePopupHoverLinks(); }

        });

        // turn on table display
        popupjQuery$('[id$="orderListId"]').show();
                
        // DMD re-initialize the list of hover links when new rows are drawn onscreen.
        popupjQuery$('[id$="orderListId"]').on( 'draw.dt', function () {
            console.debug( 'DataTable.Redraw occurred at: '+new Date().getTime() );
            initializePopupHoverLinks();
        });

        console.debug( 'setting up license number links' );
        popupjQuery$(document).on("click", '.licenseNumber', function (e) {
//          popupjQuery$(".licenseNumber").each(function (e) {
            // DMD -- click of licenseNumber field should display list of licenses
//          popupjQuery$(document).on("click", '.licenseNumber', function (e) {
            console.debug( 'click caught for displayLicenseNumberSearchDialog link' );
            // close the order line items popup dialog, if visible
            closePopupDialog();
            
            //var popupDisplayOffset = {
            //    left: e.pageX + 50,
            //    top: e.pageY - 75 
            //};
            // var licenseNumbers = "<table><tr><td>123451234512345</td></tr><tr><td>123456781234567</td></tr><tr><td>246802468024680</td></tr></table>";
            // var licenseNumbers = "123451234512345,123456781234567,246802468024680";
            var licenseNumbers = this.getAttribute( 'data-licenseNumbers' );
            displayLicenseNumberSearchDialog( this, licenseNumbers );
            
            // now display license number search dialog
            // popupjQuery$('<div class="licenseNumberSearchDialog">License Number Search</div>').dialog( '' );
            
            return false;
        });
        
               
    }); // end of document.ready()
    
    // console mode variables
    var orderDetailUrl = null;
    var orderDetailTabName = null;
    
    function loadOrderDetails() {
        console.debug( 'loadOrderDetails()...' );
        // show spinner 
        popupjQuery$("#orderLineItemDialogSpinner:hidden").show();
        popupjQuery$('#orderLineItemDialogSpinner').css("display", "block");
        popupjQuery$('td#popupLeftArm').removeClass("leftArmWhite").addClass("leftArmGray");
        
        popupjQuery$( "div#orderItemTableContainer:visible" ).toggle();
        
        // var url = "/apex/OrderDetailOverride?id=x041900000000F6AAI";
        orderDetailUrl = "/apex/OrderDetailOverride?id=" + orderId;
        orderDetailTabName = orderNumber;
        // BTBS-4368: the following line fails when run in console mode 
        // (Error: Permission denied to access property "document")
        // BTBS-4368: console mode fix
        if (sforce.console.isInConsole()) {
            console.debug( 'loadOrderDetails isInConsole = true' );
            closePopupDialog();
            sforce.console.getEnclosingPrimaryTabId(openOrderDetailSubtab);
        } else {
            console.debug( 'loadOrderDetails isInConsole = false' );
            closePopupDialog();
            window.open(orderDetailUrl, '_top');
        }
    }
    
    var openOrderDetailSubtab = function(result) {
        // Now that we have the primary tab ID, we can open a new subtab in it
        var primaryTabId = result.id;
        console.debug( 'openOrderDetailSubtab calling openSubtab with primaryTabId=' + primaryTabId );
        sforce.console.openSubtab(primaryTabId, orderDetailUrl, true, orderDetailTabName, null);
    };
    
    function loadOrderDetailsClick( orderId ) {
        // var url = "/apex/OrderDetailOverride?id=x041900000000F6AAI";
        // var url = "/apex/OrderDetailOverride?id=" + orderId;
        // BTBS-4368: the following line fails when run in console mode 
        // (Error: Permission denied to access property "document")
        // var url = "/apex/OrderDetailOverride?id=x041900000000F6AAI";
        orderDetailUrl = "/apex/OrderDetailOverride?id=" + orderId;
        orderDetailTabName = orderNumber;
        // BTBS-4368: the following line fails when run in console mode 
        // (Error: Permission denied to access property "document")
        // BTBS-4368: console mode fix
        if (sforce.console.isInConsole()) {
            closePopupDialog();
            console.debug( 'loadOrderDetailsClick isInConsole = true' );
            sforce.console.getEnclosingPrimaryTabId(openOrderDetailSubtab);
        } else {
            console.debug( 'loadOrderDetailsClick isInConsole = false' );
            closePopupDialog();
            window.open(orderDetailUrl, '_top');
        }
    }
    
    function loadAcctDetails( acctCan, acctName ) {
        if ( acctCan == null || acctCan.length == 0 ) {
            console.debug( '[loadAcctDetails] cannot navigate to account without CAN. Quitting.' );
            return;
        }
        var acctDetailUrl = "/xi/Account/CAN__c/" + acctCan;
        var acctDetailTabName = acctName;
        
        // BTBS-4368: Navigate to account in console mode
        if (sforce.console.isInConsole()) { 
            console.debug( 'loadAcctDetails isInConsole = true' );
            
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.AccountOrdersPopupController.fetchAccountForCan}', acctCan, function(result, event) {
                    console.debug( "[loadAcctDetails] calling fetchAccountForCan");
                    if (event.status) {
                        // orderLineItemResult = result;
                        console.debug( "[loadAcctDetails] fetchAccountForCan ( " + event.status + " ) returned: " + result );
                        console.debug( result );
                        console.debug( '[loadAcctDetails] calling JSON.parse()...' );
                        // var acct = JSON.parse( result );
                        console.debug( '[loadAcctDetails] JSON.parse() returned object : ' );
                        // console.debug( result.Id );
                        // var fetchedAccountId = result.Id;
                        // var fetchedAccountName = result.Name;
                        console.debug( '[loadAcctDetails] JSON.parse(result) found fetchedAccountId : ' + result.Id );
                        acctDetailUrl = '/' + result.Id;
                        console.debug( '[loadAcctDetails] calling openPrimaryTab with acctDetailUrl : ' + acctDetailUrl );
                        
                        sforce.console.openPrimaryTab(undefined, acctDetailUrl, true, acctDetailTabName);
                        
                    } else if (event.type === 'exception') {    
                        alert(event.message);
                    } else {
                        alert(event.message);
                    }
                }, {escape:true}
            );
            // sforce.console.openPrimaryTab(undefined, acctDetailUrl, true, acctDetailTabName);
            
        } else {
            console.debug( 'loadAcctDetails isInConsole = false' );
            window.open(acctDetailUrl, '_top');
        }
    }
    
    // popupjQuery$('<button id="refresh" onclick="reloadTable();">Refresh</button>').insertAfter('div.dataTables_info');
    
    var getFieldFromCurrentRow = function($this, fieldName) {
        // clear all selections
        console.debug( "getFieldFromCurrentRow fieldName = " + fieldName );
        
        // deselect the previous row and select the new row
        popupjQuery$('[id$="orderListId"]').find('tr.selected').removeClass('selected');
        
        var tr = $this.parent();
        tr.addClass('selected');
        
        // this is a <span> element, so we need to move up to tr
        // var tr = $this.parent();
        // tr.addClass('selected');
        
        var index = -1;
        switch(fieldName) {
            case 'orderNumber':
                index = AOL_ORDER_NUMBER_COLUMN;
                break;
            case 'orderStatus':
                index = AOL_ORDER_STATUS_COLUMN;
                break;
            case 'orderType':
                index = AOL_ORDER_TYPE_COLUMN;
                break;
            case 'orderDate':
                index = AOL_ORDER_DATE_COLUMN;
                break;
            case 'orderTotal':
                index = AOL_ORDER_TOTAL_COLUMN;
                break;
            case 'orderContactName':
                index = AOL_ORDER_CONTACT_NAME_COLUMN;
                break;
            case 'orderPaymentMethod':
                index = AOL_ORDER_PAYMENT_METHOD_COLUMN;
                break;
            case 'orderServiceAccountName':
                index = AOL_ORDER_SERVICE_ACCOUNT_NAME;
                break;
            case 'orderId':
                index = AOL_ORDER_ID_COLUMN;
                break;
            case 'billProfileName':
                index = AOL_BILL_PROFILE_NAME_COLUMN;
                break;
            case 'billProfileContactCaci':
                index = AOL_BILL_PROFILE_CONTACT_CACI_COLUMN;
                break;
            case 'billProfileContactName':
                index = AOL_BILL_PROFILE_CONTACT_NAME_COLUMN;
                break;
            case 'billProfileContactId': 
                index = AOL_BILL_PROFILE_CONTACT_ID_COLUMN;
                break;
            case 'billProfileContactRowId': 
                index = AOL_BILL_PROFILE_CONTACT_ROW_ID_COLUMN;
                break;
            case 'billProfileId':
                index = AOL_BILL_PROFILE_ID_COLUMN;
                break;
            case 'billProfileStatus':
                index = AOL_BILL_PROFILE_STATUS_COLUMN;
                break;
            case 'billProfilePaymentTerm':
                index = AOL_PAYMENT_TERM_COLUMN;
                break;
            case 'billProfileTokenizedCCNumber': 
                index = AOL_TOKENIZED_CC_NUMBER_COLUMN;
                break;
            case 'billProfileBdom': 
                index = AOL_BILL_PROFILE_BDOM_COLUMN;
                break;
            case 'billProfileNameOnCCard':
                index = AOL_BILL_PROFILE_NAME_ON_CCARD_COLUMN;
                break;
            case 'billProfileCCardType':
                index = AOL_BILL_PROFILE_CCARD_TYPE_COLUMN;
                break;
            case 'billProfileCCExpYear': 
                index = AOL_BILL_PROFILE_CCARD_EXP_YEAR_COLUMN;
                break;
            default:
                index = -1;
        }
    
        if (index == -1) {
            return null;
        }
        console.debug( "getFieldFromCurrentRow " + fieldName + " index = " + index );
        
        //var table = popupjQuery$('[id$="orderListId"]');
        //console.debug('getFieldFromCurrentRow table.id = ' + table.attr('id'));
        
        var fieldClass = 'td.' + fieldName; 
        console.debug('getFieldFromCurrentRow fieldClass = ' + fieldClass );
        
        var field = tr.closest( fieldClass ).val();
        // var field = tr.closest( '.orderId' ).html();
        
        // var field = table.cells('.selected', index).data()[0];
        var field = orderListTable.cells('.selected', index).data()[0];
        if ( field === 'undefined' ) {
            // field = orderListTable.cells('.selected', index).data();
        }
        console.debug("getFieldFromCurrentRow returning " + fieldName + " = '" + field + "'");
        
        return field;
    } 
    
    document.addEventListener('keyup', function (event) {
        if ( event.keyCode == 27 )   { // ESC key click
            // console.debug( "keyUp : " + event.keyCode );
            closePopupDialog();
        } else {
            // console.debug( "keyUp : " + event.keyCode );
        }
    });
    
    function closePopupDialog() {
        console.debug( "closePopupDialog" );
        popupjQuery$( 'div#orderLineItemDialogMainContainer:visible' ).toggle();
    }
    
    function openPopupDialog() {
        console.debug( "[openPopupDialog]" );
        popupjQuery$( "#orderLineItemDialogMainContainer:hidden" ).toggle();
    }
    
    function showPopupDialogSpinner() {
        console.debug( "[showPopupDialogSpinner]");
        openPopupDialog();
        popupjQuery$("#orderLineItemDialogSpinner:hidden").show();
        popupjQuery$('#orderLineItemDialogSpinner').css("display", "block");
        popupjQuery$( "div#orderItemTableContainer:visible" ).toggle();
        
        popupjQuery$('td#popupLeftArm').removeClass("leftArmWhite").addClass("leftArmGray");
    }
    
    function hidePopupDialogSpinner() {
        console.debug("[hidePopupDialogSpinner]");
        openPopupDialog();
        popupjQuery$("#orderLineItemDialogSpinner:visible").toggle();
        popupjQuery$( "div#orderItemTableContainer:hidden" ).toggle();
        popupjQuery$('td#popupLeftArm').addClass("leftArmWhite").removeClass("leftArmGray");
    }
    
    /******************************************************
     * pagerFilter(data)
     * JavaScript method for filtering pages. Copied from OrderLineItemList.component
     * when adding order line item popup to AccountOrdersList page
     ******************************************************/
    function pagerFilter(data){
        console.debug( "pagerFilter called" );
        if (popupjQuery$.isArray(data)){    // is array  
            data = {  
                total: data.length,  
                rows: data  
            }  
        }
        var dg = popupjQuery$(this);  
        var state = dg.data('treegrid');
        var opts = dg.treegrid('options');  
        var pager = dg.treegrid('getPager');  
        pager.pagination({  
            onSelectPage:function(pageNum, pageSize){  
                opts.pageNumber = pageNum;  
                opts.pageSize = pageSize;  
                pager.pagination('refresh',{  
                    pageNumber:pageNum,  
                       pageSize:pageSize  
                });  
                dg.treegrid('loadData',data); 
                resizeView();
            },
            //onBeforeRefresh: filterAssetData  
            onAfterRefresh: initializePopupHoverLinks
        });
        if (!data.topRows){  
            data.topRows = [];
            data.childRows = [];
            for (var i=0; i<data.rows.length; i++){
                var row = data.rows[i];
                row._parentId ? data.childRows.push(row) : data.topRows.push(row);
            }
            data.total = (data.topRows.length);
        }
        var start = (opts.pageNumber-1)*parseInt(opts.pageSize);  
        var end = start + parseInt(opts.pageSize);  
        data.rows = popupjQuery$.extend(true,[],data.topRows.slice(start, end).concat(data.childRows));
        initializePopupHoverLinks();
        console.debug( "pagerFilter ended" );
        return data;
    }
    
    /******************************************************
     * resizeView() 
     * JavaScript method for resizing the line items table when data is loaded. 
     * This method is copied from OrderLineItemList.component when adding order line item 
     * popup to AccountOrdersList page
     ******************************************************/
    function resizeView() {
        console.log( "resizeView called" );
        if (!popupjQuery$('.datagrid-row:visible').length){
            // if there are no records to display, show "No line items"
            var vc = popupjQuery$('#orderItemTable').datagrid('getPanel').children('div.datagrid-view');
            vc.children('div.datagrid-empty').remove();
            var d = popupjQuery$('<div class="datagrid-empty"></div>').html('No line items').appendTo(vc);
            d.css({
                position:'absolute',
                left:0,
                top:35,
                width:'100%',
                textAlign:'left'
            });
            popupjQuery$('#orderItemTable').treegrid('resize', { height: 110 });
        } else {
            var vc = popupjQuery$('#orderItemTable').datagrid('getPanel').children('div.datagrid-view');
            vc.children('div.datagrid-empty').remove();
            var rowHeights = popupjQuery$('.datagrid-header-row').height() + 15;
            popupjQuery$('.datagrid-row:visible').each(function() {
                rowHeights += popupjQuery$(this).height(); 
            });
            popupjQuery$('#orderItemTable').treegrid('resize', { height: rowHeights });
        }
        // initializePopupHoverLinks();
        console.log( "resizeView ended" );
    }

    /******************************************************
     * styeBackground(row, index) 
     * JavaScript method for setting the style of background of rows to enable striping. 
     * This method is copied from OrderLineItemList.component when adding order line item 
     * popup to AccountOrdersList page
     * TODO: fix striping for main list 
     ******************************************************/
    function styleBackground(row, index) {
        if (row.isChildOdd) { 
            return { class:"childRow" };
        } else if (row.isParent) {
            return { class:"parentRow" };
        } else { 
            return { class:"normalRow" };
        }
    }
    
    /******************************************************
     * formatProductName(value, row) 
     * Method for setting cpc-folder class on a div if the product is part of a CPC 
     * This method is copied from OrderLineItemList.component when adding order line item 
     * popup to AccountOrdersList page
     ******************************************************/
    function formatProductName(value, row) {
        if (value) {
            if (row.isParent == true && (row.isChildOdd == false && row.isChildEven == false)) { 
                return value + '<div class="cpc-folder"></div>';
            } else if (row.isChildOdd == true || row.isChildEven == true) {
                return value ;
            } else { 
                return value ;
            }
        }
    }
    
    
    /******************************************************
     * initializePopupHoverLinks()
     * Creates timeouts for displaying popup dialog on hover 
     * This method is copied from OrderLineItemList.component when adding order line item 
     * popup to AccountOrdersList page
     * Relys on the attribute data-orderId containing the orderId (External Id) of the 
     * Order__x object being queried.
     *     popupjQuery$(document).on("click", '.orderpopper', function (e) {
     *****************************************************/
    function initializePopupHoverLinks() {
        console.debug( "initializePopupHoverLinks called" );
        popupjQuery$(".orderpopper").each(function() {
            var orderLineId = this.getAttribute('data-orderId');
            // for tab label
            var orderLineNumber = this.getAttribute('data-orderNumber'); 
            // console.debug( "init.orderpopper link orderLineId=" + orderLineId );
            // set the popup timer on mouse enter
            popupjQuery$(this).mouseenter(function() {
                // console.debug( "## mouse enter " + orderLineId );
                clearTimeout(popupDialogTimeoutIn[orderLineId]);
                var thisObject = this;
                // set global var orderId for navigation
                orderId = orderLineId;
                orderNumber = orderLineNumber;
                popupDialogTimeoutIn[orderLineId] = setTimeout(function() { 
                    loadSelectedOrderLineItems(orderLineId, thisObject);
                }, hoverDelay);
            });
            // unset the popup timer on exit
            popupjQuery$(this).mouseleave(function() {
                // console.debug( "## mouse leave " + orderLineId );
                clearTimeout(popupDialogTimeoutIn[orderLineId]);
            });
        });

        // console.debug( "initializePopupHoverLinks ended" );
    }
    
    /*********************************************************************************************
     * loadSelectedOrderLineItems
     * load the selected order id (passed) for the element that was clicked, e.
     * Use the clicked object to gather the location to present the dialog to the agent.
     * Popup dialog should be below and to the right of the clicked element.
     ********************************************************************************************/
    function loadSelectedOrderLineItems( selectedOrderId, e ) {
        console.debug( "[loadSelectedOrderLineItems] orderId=" + selectedOrderId + " e=" + popupjQuery$(e).text() );
        orderId = selectedOrderId;
        // show popup dialog spinner
        showPopupDialogSpinner();
        
        var top      = popupjQuery$(e).offset().top;
        var left     = popupjQuery$(e).offset().left;
        var height   = popupjQuery$(e).height();
        var width    = popupjQuery$(e).width();
        
        //console.debug( "[loadSelectedOrderLineItems] target top is " + top );
        //console.debug( "[loadSelectedOrderLineItems] target left is " + left );
        //console.debug( "[loadSelectedOrderLineItems] target width is " + width );
        //console.debug( "[loadSelectedOrderLineItems] target height is " + height );
        
        var diffTop        = top + (height) + 10;
        var diffLeft       = left + (width/2);
        // console.debug( "[loadSelectedOrderLineItems] diff top is " + diffTop );
        
        //console.debug( "[loadSelectedOrderLineItems] target top=" + top + ", left=" + left + ", width=" + width + ", height=" + height );
        //console.debug( "[loadSelectedOrderLineItems] diffTop (top + height) = (" + Math.round(top) + " + " + Math.round(height) + " = " + Math.round(diffTop) + ")" );
        //console.debug( "[loadSelectedOrderLineItems] diffLeft (left + (width/2)) = (" + Math.round(left) + " + " + Math.round(width/2) + " = " + Math.round(diffLeft) + ")" );
        
        var position = {
            left: Math.round(diffLeft),
            top:  Math.round(diffTop)
        };
        console.debug( "[loadSelectedOrderLineItems] position=(top=" + position.top + ", left=" + position.left + ")" );
        
        // right now, assume that the link clicked is the order number 
        orderNumber = popupjQuery$(e).text();
        console.debug( "[loadSelectedOrderLineItems] orderNumber=" + orderNumber + ", orderId=" + orderId );
        
        if ( orderNumber == null || orderId == null ) {
            return;
            // alert( "Cannot continue.  OrderNumber and orderId cannot be null: orderNumber=" + orderNumber + ", orderId=" + orderId );
        } else {
            // console.debug( "[loadSelectedOrderLineItems] Ready to fetch order line items" );
        }
        
        // popupjQuery$( "#orderLineItemDialogMainContainer:hidden" ).toggle();
        // openPopupDialog();
        
        // move the dialog container to another location onscreen
        if ( position != null && position != 'undefined' ) {
            popupjQuery$( "#orderLineItemDialogMainContainer" ).css(
                {   position : 'absolute' }
            );
            popupjQuery$( "#orderLineItemDialogMainContainer" ).offset( position );
            // popupjQuery$( "#orderLineItemDialogMainContainer" ).left = offset.left;
        }
        loadOrderLineItemData( orderId, position );
    }
    



    // DMD migrating code from BillingHistoryPopups.component to enable billing profile dialog in Order List UI  
    /*  
     * Closes the billing profile popup dialog
    */
    function closeBpPopup() {
        popupjQuery$('.popbox').hide();
    }
    
    
    
    
    function showPaymentMethodDialog(clickedObject) { 
        // , bpName, bpRowId, bdom, nameOnCCard, ccNumber, ccType, billProfileCCExpYear) {
        var dialogPosition = popupjQuery$(clickedObject).offset();
        var width = popupjQuery$(clickedObject).width();
        var popupDisplayOffset = {
            left: dialogPosition.left + width + 50,
            top:  dialogPosition.top - 60 
        };
        
        
        
        console.debug( 'click caught for bpopper class object: popupDisplayOffset.left=' + popupDisplayOffset.left + ', top=' + popupDisplayOffset.top );
        // close the order line items popup dialog, if visible
        closePopupDialog();
        
        // bpName, bpRowId, bdom, nameOnCCard, ccNumber, ccType, billProfileCCExpYear
        
        var bpName              = popupjQuery$(clickedObject).html();
        var bpRowId             = popupjQuery$(clickedObject).attr('data-bpRowId');
        var bpPaymentMethod     = popupjQuery$(clickedObject).attr('data-bpPaymentMethod');
        var bpBDOM              = popupjQuery$(clickedObject).attr('data-bpBDOM');
        var bpNameOnCard        = popupjQuery$(clickedObject).attr('data-bpNameOnCard');
        var bpCCardNumber       = popupjQuery$(clickedObject).attr('data-bpCCardNumber');
        var bpCCardType         = popupjQuery$(clickedObject).attr('data-bpCCardType');
        var bpCCardExpYear      = popupjQuery$(clickedObject).attr('data-bpCCardExpYear');
        var bpContactName       = popupjQuery$(clickedObject).attr('data-bpContactName');
        var bpBankAccountName   = popupjQuery$(clickedObject).attr('data-bpBankAccountName');
        var bpLastUpdatedDate   = popupjQuery$(clickedObject).attr('data-bpLastUpdatedDate');
        var bpStatus            = popupjQuery$(clickedObject).attr('data-bpStatus');
        
        console.debug( "loading billing profile " + bpName + ", " + bpRowId + "," + bpPaymentMethod + ", " + bpBDOM + ", " + bpNameOnCard + ", " + bpCCardNumber + ", " + bpCCardType + ", " + bpCCardExpYear + ", " + bpBankAccountName + ", " + bpLastUpdatedDate + ", " + bpStatus );
        
        var acctCan = '{!can}';
        
        closeBpPopup();
        
        // DMD: fix this later
        // var payType = getFieldFromCurrentRow(popupjQuery$(this), 'orderPaymentMethod');
        // const BP_TYPE_CREDIT_CARD = 'credit card';
        // const BP_TYPE_EFT = 'eft';
        // const BP_TYPE_INVOICE = 'invoice';

        var payType = bpName;
        var profileName = (( bpName != null ) ? bpName.toUpperCase() : "" );
        if ( profileName == null ) {
            // should never be null.  Proceed.
            payType = BP_TYPE_CREDIT_CARD;
        } else if ( profileName.indexOf( "EFT" ) == 0 ) {
            // EFT payment types
            payType = BP_TYPE_EFT;
        } else if ( profileName.indexOf( "NET" ) == 0 ) {
            // net89, etc. payment types
            payType = BP_TYPE_INVOICE;
        } else {
            // credit card
            payType = BP_TYPE_CREDIT_CARD;
        }
        console.debug( "billing profile type = " + payType + ", " + profileName + "..." );
        
        // DMD : why set this only to retrieve it?
        popupjQuery$(this).attr("data-popbox", "PaymentMethodDetailsPopup");
        var target = '#' + (popupjQuery$(this).attr('data-popbox'));
        popupjQuery$(target).show().offset(popupDisplayOffset);
        
        popupjQuery$('.LoadingSpinner').css("display", "inline");
        
        // <!-- BTBS: 3522 Refreshing inner popup data before loading -->
        document.getElementById("paymentPopupLabel1").innerHTML = " ";
        document.getElementById("paymentPopupLabel2").innerHTML = " ";
        document.getElementById("paymentPopupLabel3").innerHTML = " ";
        document.getElementById("paymentPopupLabel4").innerHTML = " ";
        document.getElementById("paymentPopupLabel5").innerHTML = " ";
        document.getElementById("paymentPopupLabel6").innerHTML = " ";
        
        document.getElementById("paymentPopupLabelValue1").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue2").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue3").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue4").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue5").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue6").innerHTML = " ";
        document.getElementById("paymentPopupErrorValue").innerHTML = " ";
        
        popupjQuery$("#paymentPopupLabelError1").hide();
        
        popupjQuery$('.LoadingSpinner').css("display", "none");
        console.debug( "loading billing profile returned data for " + bpRowId );
        
        var billInfoPoid = "";
        
        document.getElementById("paymentPopupLabel1").innerHTML = "Billing Profile:";
        if (profileName != null) {
            // DMD FIX THIS LATER: need to be able to retrieve billing profile info without using the billInfoPoid
            document.getElementById("paymentPopupLabelValue1").innerHTML = '<a href="#" onclick="profileLinkClick(\'' + bpRowId + '\'); return false;"><span style="text-decoration:underline;">' + profileName + '</span></a>';
        }
        
        if ( BP_TYPE_CREDIT_CARD === payType ) {
            // bpRowId = popupjQuery$(clickedObject).attr('data-bpRowId');
            // bpName  = popupjQuery$(clickedObject).html();
            // bpPaymentMethod = popupjQuery$(clickedObject).attr('data-bpPaymentMethod');
            // bpBDOM          = popupjQuery$(clickedObject).attr('data-bpBDOM');
            // bpNameOnCard    = popupjQuery$(clickedObject).attr('data-bpNameOnCard');
            // bpCCardNumber   = popupjQuery$(clickedObject).attr('data-bpCCardNumber');
            // bpCCardType     = popupjQuery$(clickedObject).attr('data-bpCCardType');
            // bpCCardExpYear  = popupjQuery$(clickedObject).attr('data-bpCCardExpYear');
        
            //var bdom = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileBdom');
            //var nameOnCCard = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileNameOnCCard');
            //var ccNumber = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileTokenizedCCNumber');
            //var ccType = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileCCardType');
            //var billProfileCCExpYear = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileCCExpYear');
            document.getElementById("paymentPopupLabel2").innerHTML = "Billing Day of Month:";
            if (typeof(bpBDOM) != 'undefined' && bpBDOM != null) {
                document.getElementById("paymentPopupLabelValue2").innerHTML = bpBDOM;
            } else {
                document.getElementById("paymentPopupLabelValue2").innerHTML = 'DEBUG: not found';
            }
            
            // var nameOnCCard = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileNameOnCCard');
            document.getElementById("paymentPopupLabel3").innerHTML = "Name On Credit Card:";
            if (typeof(bpNameOnCard) != 'undefined' && bpNameOnCard != null) {
                document.getElementById("paymentPopupLabelValue3").innerHTML = bpNameOnCard;
            } else {
                document.getElementById("paymentPopupLabelValue3").innerHTML = 'DEBUG: Not found';
            }
            
            // var ccNumber = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileTokenizedCCNumber');
            if (typeof(bpCCardNumber) != 'undefined' && bpCCardNumber != null) {
                console.debug( 'found cc token ' + bpCCardNumber );
                var maskedCCNumber = bpCCardNumber.replace(/\d(?=\d{4})/g, "*");
                console.debug( 'found masked number ' + maskedCCNumber );
                
                document.getElementById("paymentPopupLabel4").innerHTML = "Credit Card Number:";
                if (typeof(maskedCCNumber) != 'undefined' && maskedCCNumber != null) {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = maskedCCNumber;
                } else {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = 'DEBUG: ccNumber not found';
                }
            }
            
            // var ccType = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileCCardType');
            document.getElementById("paymentPopupLabel5").innerHTML = "Card Type:";
            if (typeof(bpCCardType) != 'undefined' && bpCCardType != null) {
                document.getElementById("paymentPopupLabelValue5").innerHTML = bpCCardType;
            } else {
                document.getElementById("paymentPopupLabelValue5").innerHTML = 'Debug: Credit Card Type not found';
            }
             
            // var billProfileCCExpYear = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileCCExpYear');
            document.getElementById("paymentPopupLabel6").innerHTML = "Expiration Year:";
            if (typeof(bpCCardExpYear) != 'undefined' && bpCCardExpYear != null) {
                document.getElementById("paymentPopupLabelValue6").innerHTML = bpCCardExpYear;
            } else {
                document.getElementById("paymentPopupLabelValue6").innerHTML = 'DEBUG: not found';
            }

            // end credit card type
            
        } else if (BP_TYPE_EFT === payType ) {
            // EFT
            document.getElementById("paymentPopupLabel6").innerHTML = " ";
            document.getElementById("paymentPopupLabelValue6").innerHTML = " ";
            
            // if (result[0] != null) {
                // result[0].BP_CONTACT_NAME__c == bpContactName
                document.getElementById("paymentPopupLabel2").innerHTML = "Contact Name:";
                if (typeof(bpContactName) !== 'undefined' && bpContactName != null) {
                    document.getElementById("paymentPopupLabelValue2").innerHTML = bpContactName;
                }

                // result[0].BP_BANK_ACCOUNT_NAME__c = bpBankAccountName
                document.getElementById("paymentPopupLabel3").innerHTML = "Bank Account:";
                if (typeof(bpBankAccountName) !== 'undefined' && bpBankAccountName != null) {
                    document.getElementById("paymentPopupLabelValue3").innerHTML = bpBankAccountName;
                }
                
                // BP_LAST_UPDATED_DATE__c = bpLastUpdatedDate
                document.getElementById("paymentPopupLabel4").innerHTML = "Date:";
                if (bpLastUpdatedDate != null) {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = new Date(bpLastUpdatedDate);
                }
                
                // BP_STATUS__c = bpStatus;
                document.getElementById("paymentPopupLabel5").innerHTML = "Status:";
                if (typeof(bpStatus) !== 'undefined' && bpStatus != null) {
                    document.getElementById("paymentPopupLabelValue5").innerHTML = bpStatus;
                }
            // } else {
            //    document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
            //    document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
            // }
        } else if ( BP_TYPE_INVOICE === payType ) {

            // Net Term
            document.getElementById("paymentPopupLabel5").innerHTML = " ";
            document.getElementById("paymentPopupLabelValue5").innerHTML = " ";
            
            document.getElementById("paymentPopupLabel6").innerHTML = " ";
            document.getElementById("paymentPopupLabelValue6").innerHTML = " ";

            // if (result[0] != null) {

                document.getElementById("paymentPopupLabel2").innerHTML = "Contact Name:";
                if (typeof(bpContactName) !== 'undefined' && bpContactName != null) {
                    document.getElementById("paymentPopupLabelValue2").innerHTML = bpContactName;
                }
                 
                // TODO: display format
                document.getElementById("paymentPopupLabel3").innerHTML = "Date:";
                if (typeof(bpLastUpdatedDate) !== 'undefined' && bpLastUpdatedDate != null) {
                    document.getElementById("paymentPopupLabelValue3").innerHTML = bpLastUpdatedDate;
                }
                
                document.getElementById("paymentPopupLabel4").innerHTML = "Status:";
                if (typeof(bpStatus) !== 'undefined' && bpStatus != null) {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = bpStatus;
                }
            //} else {
            //    document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
            //    document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
            //}
        }
    }
    
    
    popupjQuery$(document).on("click", '.bpopper', function (e) {
        var popupDisplayOffset = {
            left: e.pageX + 50,
            top: e.pageY - 75 
        };
        
        console.debug( 'click caught for bpopper class object: popupDisplayOffset.left=' + popupDisplayOffset.left + ', top=' + popupDisplayOffset.top );
        // close the order line items popup dialog, if visible
        closePopupDialog();
        
        var bpRowId = popupjQuery$(this).attr('data-bpRowId');
        var bpName  = popupjQuery$(this).html();
        
        console.debug( "loading billing profile " + bpName + ", " + bpRowId + "..." );
        
        var acctCan = '{!can}';
        
        closeBpPopup();
        
        console.debug( "loading billing profile " + bpRowId + ", " + bpName + "..." );
        var acctCan = '{!can}';
        
        // DMD: fix this later
        var payType = getFieldFromCurrentRow(popupjQuery$(this), 'orderPaymentMethod');
        
        var profileName = (( bpName != null ) ? bpName.toUpperCase() : "" );
        if ( profileName == null ) {
            // should never be null.  Proceed.
            payType = "cc";
        } else if ( profileName.indexOf( "EFT" ) == 0 ) {
            // EFT payment types
            payType = "dd";
        } else if ( profileName.indexOf( "NET" ) == 0 ) {
            // net89, etc. payment types
            payType = "invoice";
        } else {
            // credit card
            payType = "cc";
        }
        console.debug( "billing profile type = " + payType + ", " + profileName + "..." );
        
        // var payType = getFieldFromCurrentRow(popupjQuery$(this), 'payType');
        // DMD: fix this later
        // billInfoPoid = parseInt(getFieldFromCurrentRow(popupjQuery$(this), 'billInfoPoid').replace(/,/g,''));
        // DMD : why set this only to retrieve it?
        popupjQuery$(this).attr("data-popbox", "PaymentMethodDetailsPopup");
        var target = '#' + (popupjQuery$(this).attr('data-popbox'));
        popupjQuery$(target).show().offset(popupDisplayOffset);
        
        popupjQuery$('.LoadingSpinner').css("display", "inline");
        
        // <!-- BTBS: 3522 Refreshing inner popup data before loading -->
        document.getElementById("paymentPopupLabel1").innerHTML = " ";
        document.getElementById("paymentPopupLabel2").innerHTML = " ";
        document.getElementById("paymentPopupLabel3").innerHTML = " ";
        document.getElementById("paymentPopupLabel4").innerHTML = " ";
        document.getElementById("paymentPopupLabel5").innerHTML = " ";
        document.getElementById("paymentPopupLabel6").innerHTML = " ";
        
        document.getElementById("paymentPopupLabelValue1").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue2").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue3").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue4").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue5").innerHTML = " ";
        document.getElementById("paymentPopupLabelValue6").innerHTML = " ";
        document.getElementById("paymentPopupErrorValue").innerHTML = " ";
        
        popupjQuery$("#paymentPopupLabelError1").hide();
        
        popupjQuery$('.LoadingSpinner').css("display", "none");
        console.debug( "loading billing profile returned data for " + bpRowId );
        
        var billInfoPoid = "";
        //if ( result != null && result[0] != null ) {
        //    billInfoPoid = result[0].BILLINFO_POID__c;
        //    console.debug( "remoting function getPaymentDetailsForSiebelRowId billInfoPoid=" + billInfoPoid );
        //}
        // <!-- 09/08 Added trailing ':' to each of the below labels.-->
        
        document.getElementById("paymentPopupLabel1").innerHTML = "Billing Profile:";
        if (profileName != null) {
            // DMD FIX THIS LATER: need to be able to retrieve billing profile info without using the billInfoPoid
            document.getElementById("paymentPopupLabelValue1").innerHTML = '<a href="#Foo" onclick="profileLinkClick(\'' + bpRowId + '\'); return false;"><span style="text-decoration:underline;">' + profileName + '</span></a>';
        }
        
        if (payType.indexOf('cc') > -1) {

            // credit card

            //if (result[0] != null) {
                var bdom = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileBdom');
                document.getElementById("paymentPopupLabel2").innerHTML = "Billing Day of Month:";
                if (typeof(bdom) != 'undefined' && bdom != null) {
                    document.getElementById("paymentPopupLabelValue2").innerHTML = bdom;
                } else {
                    document.getElementById("paymentPopupLabelValue2").innerHTML = 'DEBUG: not found';
                }
                
                var nameOnCCard = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileNameOnCCard');
                document.getElementById("paymentPopupLabel3").innerHTML = "Name On Credit Card:";
                if (typeof(nameOnCCard) != 'undefined' && nameOnCCard != null) {
                    document.getElementById("paymentPopupLabelValue3").innerHTML = nameOnCCard;
                } else {
                    document.getElementById("paymentPopupLabelValue3").innerHTML = 'DEBUG: Not found';
                }
                
                var ccNumber = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileTokenizedCCNumber');
                console.debug( 'found cc token ' + ccNumber );
                // var maskedCCNumber = ccNumber.substring( ccNumber.length -4, ccNumber.length );
                var maskedCCNumber = ccNumber.replace(/\d(?=\d{4})/g, "*");
                console.debug( 'found masked number ' + maskedCCNumber );
                document.getElementById("paymentPopupLabel4").innerHTML = "Credit Card Number:";
                if (typeof(ccNumber) != 'undefined' && ccNumber != null) {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = maskedCCNumber;
                } else {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = 'DEBUG: ccNumber not found';
                }
                
                var ccType = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileCCardType');
                document.getElementById("paymentPopupLabel5").innerHTML = "Card Type:";
                if (typeof(ccType) != 'undefined' && ccType != null) {
                    document.getElementById("paymentPopupLabelValue5").innerHTML = ccType;
                } else {
                    document.getElementById("paymentPopupLabelValue5").innerHTML = 'Debug: Credit Card Type not found';
                }
                 
                var billProfileCCExpYear = getFieldFromCurrentRow(popupjQuery$(this), 'billProfileCCExpYear');
                document.getElementById("paymentPopupLabel6").innerHTML = "Expiration Year:";
                if (typeof(billProfileCCExpYear) != 'undefined' && billProfileCCExpYear != null) {
                    document.getElementById("paymentPopupLabelValue6").innerHTML = billProfileCCExpYear;
                } else {
                    document.getElementById("paymentPopupLabelValue6").innerHTML = 'DEBUG: not found';
                }
                
            //} else {  // if result is null
            //    document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
            //    document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
            //}
        } else if (payType.indexOf('dd') > -1) {
            // EFT
            document.getElementById("paymentPopupLabel6").innerHTML = " ";
            document.getElementById("paymentPopupLabelValue6").innerHTML = " ";
            
            if (result[0] != null) {

                document.getElementById("paymentPopupLabel2").innerHTML = "Contact Name:";
                if (result[0].BP_CONTACT_NAME__c != null) {
                    document.getElementById("paymentPopupLabelValue2").innerHTML = result[0].BP_CONTACT_NAME__c;
                }
 
                document.getElementById("paymentPopupLabel3").innerHTML = "Bank Account:";
                if (result[0].BP_BANK_ACCOUNT_NAME__c != null) {
                    document.getElementById("paymentPopupLabelValue3").innerHTML = result[0].BP_BANK_ACCOUNT_NAME__c;
                }
                 
                document.getElementById("paymentPopupLabel4").innerHTML = "Date:";
                if (result[0].BP_LAST_UPDATED_DATE__c != null) {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = new Date(result[0].BP_LAST_UPDATED_DATE__c);
                }
 
                document.getElementById("paymentPopupLabel5").innerHTML = "Status:";
                if (result[0].BP_STATUS__c != null) {
                    document.getElementById("paymentPopupLabelValue5").innerHTML = result[0].BP_STATUS__c;
                }
            } else {
                document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
                document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
            }
        } else if (payType.indexOf('invoice') > -1) {

            // Net Term
            document.getElementById("paymentPopupLabel5").innerHTML = " ";
            document.getElementById("paymentPopupLabelValue5").innerHTML = " ";
            
            document.getElementById("paymentPopupLabel6").innerHTML = " ";
            document.getElementById("paymentPopupLabelValue6").innerHTML = " ";

            if (result[0] != null) {

                document.getElementById("paymentPopupLabel2").innerHTML = "Contact Name:";
                if (result[0].BP_CONTACT_NAME__c != null) {
                    document.getElementById("paymentPopupLabelValue2").innerHTML = result[0].BP_CONTACT_NAME__c;
                }
                 
                // TODO: display format
                document.getElementById("paymentPopupLabel3").innerHTML = "Date:";
                if (result[0].BP_LAST_UPDATED_DATE__c != null) {
                    document.getElementById("paymentPopupLabelValue3").innerHTML = new Date(result[0].BP_LAST_UPDATED_DATE__c);
                }
                 
                document.getElementById("paymentPopupLabel4").innerHTML = "Status:";
                if (result[0].BP_STATUS__c != null) {
                    document.getElementById("paymentPopupLabelValue4").innerHTML = result[0].BP_STATUS__c;
                }
            } else {
                document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
                document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
            }
        }

        

        /******************************************************************************************************************
         DMD 8/9/2016: Replacing ws call

        console.debug( "Calling getPaymentDetailsForSiebelRowId (" + bpRowId + ")" );
        //  Remote Action to load details into Billling Profile popup.
        Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.AccountOrdersPopupController.getPaymentDetailsForSiebelRowId}',
            bpRowId,
            function(result,event) {
                if (event.status) {
                    if (result != null) {
                        popupjQuery$('.LoadingSpinner').css("display", "none");
                        console.debug( "loading billing profile returned data for " + bpRowId );
                        var billInfoPoid = "";
                        if ( result != null && result[0] != null ) {
                            billInfoPoid = result[0].BILLINFO_POID__c;
                            console.debug( "remoting function getPaymentDetailsForSiebelRowId billInfoPoid=" + billInfoPoid );
                        }
                        // <!-- 09/08 Added trailing ':' to each of the below labels.-->
                        document.getElementById("paymentPopupLabel1").innerHTML = "Billing Profile:";
                        if (result[0] != null && result[0].BP_NAME__c != null) {
                            // DMD FIX THIS LATER: need to be able to retrieve billing profile info without using the billInfoPoid
                            document.getElementById("paymentPopupLabelValue1").innerHTML = '<a href="#Foo" onclick="profileLinkClick(\'' + billInfoPoid + '\'); return false;">' + result[0].BP_NAME__c + '</a>';
                        }
                        
                        if (payType.indexOf('cc') > -1) {
         
                            // credit card
             
                            if (result[0] != null) {
                                
                                document.getElementById("paymentPopupLabel2").innerHTML = "Billing Day of Month:";
                                if (result[0].BDOM__c != null) {
                                    document.getElementById("paymentPopupLabelValue2").innerHTML = result[0].BDOM__c;
                                }
                 
                                document.getElementById("paymentPopupLabel3").innerHTML = "Name On Credit Card:";
                                if (result[0].NAME_ON_CC__c !=null) {
                                    document.getElementById("paymentPopupLabelValue3").innerHTML = result[0].NAME_ON_CC__c;
                                }
                 
                                document.getElementById("paymentPopupLabel4").innerHTML = "Credit Card Number:";
                                if (result[0].EFT_CC_NUMBER__c != null) {
                                    document.getElementById("paymentPopupLabelValue4").innerHTML = result[0].EFT_CC_NUMBER__c;
                                }
                                
                                document.getElementById("paymentPopupLabel5").innerHTML = "Card Type:";
                                if (result[0].CC_TYPE__c !=null) {
                                    document.getElementById("paymentPopupLabelValue5").innerHTML = result[0].CC_TYPE__c;
                                }
                 
                                document.getElementById("paymentPopupLabel6").innerHTML = "Expiration Year:";
                                if (result[0].CC_EXPIRATION_YEAR__c != null) {
                                    document.getElementById("paymentPopupLabelValue6").innerHTML = result[0].CC_EXPIRATION_YEAR__c;
                                }
                            } else {
                                document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
                                document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
                            }
                        } else if (payType.indexOf('dd') > -1) {
                            // EFT
                            document.getElementById("paymentPopupLabel6").innerHTML = " ";
                            document.getElementById("paymentPopupLabelValue6").innerHTML = " ";
                            
                            if (result[0] != null) {
             
                                document.getElementById("paymentPopupLabel2").innerHTML = "Contact Name:";
                                if (result[0].BP_CONTACT_NAME__c != null) {
                                    document.getElementById("paymentPopupLabelValue2").innerHTML = result[0].BP_CONTACT_NAME__c;
                                }
                 
                                document.getElementById("paymentPopupLabel3").innerHTML = "Bank Account:";
                                if (result[0].BP_BANK_ACCOUNT_NAME__c != null) {
                                    document.getElementById("paymentPopupLabelValue3").innerHTML = result[0].BP_BANK_ACCOUNT_NAME__c;
                                }
                                 
                                document.getElementById("paymentPopupLabel4").innerHTML = "Date:";
                                if (result[0].BP_LAST_UPDATED_DATE__c != null) {
                                    document.getElementById("paymentPopupLabelValue4").innerHTML = new Date(result[0].BP_LAST_UPDATED_DATE__c);
                                }
                 
                                document.getElementById("paymentPopupLabel5").innerHTML = "Status:";
                                if (result[0].BP_STATUS__c != null) {
                                    document.getElementById("paymentPopupLabelValue5").innerHTML = result[0].BP_STATUS__c;
                                }
                            } else {
                                document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
                                document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
                            }
                        } else if (payType.indexOf('invoice') > -1) {
         
                            // Net Term
                            document.getElementById("paymentPopupLabel5").innerHTML = " ";
                            document.getElementById("paymentPopupLabelValue5").innerHTML = " ";
                            
                            document.getElementById("paymentPopupLabel6").innerHTML = " ";
                            document.getElementById("paymentPopupLabelValue6").innerHTML = " ";
             
                            if (result[0] != null) {
             
                                document.getElementById("paymentPopupLabel2").innerHTML = "Contact Name:";
                                if (result[0].BP_CONTACT_NAME__c != null) {
                                    document.getElementById("paymentPopupLabelValue2").innerHTML = result[0].BP_CONTACT_NAME__c;
                                }
                                 
                                // TODO: display format
                                document.getElementById("paymentPopupLabel3").innerHTML = "Date:";
                                if (result[0].BP_LAST_UPDATED_DATE__c != null) {
                                    document.getElementById("paymentPopupLabelValue3").innerHTML = new Date(result[0].BP_LAST_UPDATED_DATE__c);
                                }
                                 
                                document.getElementById("paymentPopupLabel4").innerHTML = "Status:";
                                if (result[0].BP_STATUS__c != null) {
                                    document.getElementById("paymentPopupLabelValue4").innerHTML = result[0].BP_STATUS__c;
                                }
                            } else {
                                document.getElementById("paymentPopupLabel1").innerHTML = 'Record not found';
                                document.getElementById("paymentPopupErrorValue").innerHTML = 'Billing profile not found in billing system.  It may still exist in the <a href="#" onclick="openBillingProfile();" style="text-decoration:underline !important;">billing profiles list</a>'; 
                            }
                        }
                        
                    } else if (result == null) {
                        alert("Could not retrieve data. Please try again later.");
                    }
                } else if (event.type === 'exception') {

                    alert("Could not retrieve data. Please try again later.");

                } else {

                    alert("Could not retrieve data. Please try again later.");

                }
            },
            {escape: true}
        );

        ***************************************************************************************************************/
        
    });
    
    
    var closeLicenseNumberSearchDialog = function() {
        popupjQuery$("#showLicenseNumberSearchDialog").removeClass("showLicenseNumberSearchDialogOpen");
        popupjQuery$("#licenseNumberSearchDialog").dialog("close");
    }
    
    /** display popover (regarding all contacts popovers) */
    var displayLicenseNumberSearchDialog = function($this, licenseNumbers) {
        console.debug( 'displayLicenseNumberSearchDialog licenseNumbers=' + licenseNumbers );
        // resetTimers();
        
        if ( licenseNumbers.includes( "[" )) {
            licenseNumbers = licenseNumbers.substring( 1, ( licenseNumbers.length -1 ));
            console.debug( 'displayLicenseNumberSearchDialog licenseNumbers=' + licenseNumbers );
            // alert( "Fixed licenseNumbers to : " + licenseNumbers );
        }
        var licenseNumberArray = licenseNumbers.split( "," );
        
        var licenseNumberHtml = "<table><tr><td style=\"text-align: left;\" >"
            + "<b>License&nbsp;Numbers:</b><br />\n" 
            + "</td></tr><tr><td style=\"text-align: right;\" >\n";
        
        var licenseNumberList = licenseNumberArray.join( "</td></tr><tr><td style=\"text-align:right;\" >" );
        licenseNumberHtml += licenseNumberList + "</td></tr></table>\n";
        
        // popupjQuery$("#licenseNumberSearchDialogInner").html( licenseNumbers );
        popupjQuery$("#licenseNumberSearchDialogInner").html( licenseNumberHtml );
        
        // displayLicenseNumberSearchDialog
        
        // var div = popupjQuery$('<div id="licenseNumberSearchDialog" />');
        popupjQuery$("#licenseNumberSearchDialog").dialog( {
            draggable:false,
            resizable: false,
            closeOnEscape: true, // maxHeight: 400,
            width: 80,
            height: 100,
            close: closeLicenseNumberSearchDialog,
            dialogClass: "licenseNumberSearchDialog",
            position: { my: "right top", at: "left bottom", of: $this }, // align to left bottom of the link clicked
            autoOpen: false,    // set to false to allow click outside plug-in to work
            clickOutside: true, // clicking outside the dialog will close it
            clickOutsideTrigger: "#licenseNumberSearchButton"  // Element (id or class) that triggers the dialog opening 
        });
        
        popupjQuery$(".ui-dialog-titlebar").hide();
        
        // popupjQuery$("#licenseNumberSearchDialog").dialog( "open" );
        
        console.debug( "licenseNumberSearchDialog calling setTimeout() function..." );
        setTimeout(function(){
            // popupjQuery$("#licenseNumberSearchDialog").addClass("blue-border-3px");
            // popupjQuery$("#licenseNumberSearchDialog").parent().addClass("transparent");
            //popupjQuery$("#licenseNumberSearchDialog").parent().addClass("blue-border-3px");
            //popupjQuery$("#licenseNumberSearchDialog").addClass("browse-catalog-dialog-open");
            
            popupjQuery$("#licenseNumberSearchDialog").dialog("open");
            console.debug( "licenseNumberSearchDialog called .dialog('open')" );
        }, 100);
        
        console.debug( "displayLicenseNumberSearchDialog ended." );
    };
    
    
</script>
        
        
 <!-- ***********************************  Order Line Item Dialog Popup *********************************************-->
    <div id="orderLineItemDialogMainContainer" style="display:none; background-color: transparent; z-index:10; width:75%;">
            
        <table border="0" cellspacing="0" cellpadding="0" valign="top" style="background-color: transparent; width:100%" >
        <tr>
            <td id="popupLeftArm" class="leftArmGray">
                &nbsp;
            </td>
            <td>
                <div class="orderLineItemInnerContainer" 
                    style="background-color:white; z-index:10; width:100%; display: block; ">
                    
                    <div id="orderLineItemDialogSpinner" class="orderLineItemDialogSpinner">
                        <img src="{!$Resource.SFDC_Loading}" style="padding-top: 10px;" />
                        <p style="font-size: large;">Loading...</p>
                    </div>
                    
                    <div id="orderItemTableContainer" class="orderItemTableContainer" >
                        <button id="btnOrderDetails" onclick="loadOrderDetails();" style="float:left; margin:5px;">Order Details</button>
                        <button id="btnCloseDialog"  onclick="closePopupDialog();" style="float:right; margin:5px;">X</button>
                        
                        <br clear="all" />
                        
                        <table id="orderItemTable" title="Order Line Items" 
                           class="easyui-treegrid" width="100%" 
                           data-options="
                                   fitColumns: true,
                                   animate: true,
                                   collapsible: false,
                                   idField: 'externalId',
                                   treeField: 'isCPC',
                                   loadFilter: pagerFilter,
                                   pagination: false,
                                   pageSize: 5,
                                   pageList: [5,10,20,50,100],
                                   rowStyler: styleBackground,
                                   onExpand: resizeView,
                                   onCollapse: resizeView,
                                   rownumbers: false,
                                   singleSelect: true"
                        > 
                        
                            <thead>
                                <tr>
                                    <th data-options="field:'isCPC', width:8, resizable:true" ></th>   
                                    <th data-options="field:'Product_Name', formatter:formatProductName, width:60, resizable:true" ><b>Line Item</b> </th>
                                    <th data-options="field:'Action_Code', width:20,resizable:true" ><b>Action</b> </th>
                                    <th data-options="field:'Configuration', width:70, resizable:true"><b>Configuration</b></th>
                                    <th data-options="field:'License_Number', width:30, resizable:true" ><b>License Number</b> </th>
                                    <th data-options="field:'Current_Charge', width:30, resizable:true" ><b>Current Charge</b> </th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div><!-- end orderItemTableContainer -->
                </div><!-- end orderLineItemInnerContainer -->
            </td>
        </tr>
        </table>
        
    </div> <!-- end orderLineItemDialogMainContainer -->


    <!-- ***********************************  Billing Profile Details Popup *********************************************-->
    

    <div id="PaymentMethodDetailsPopup" class="popbox"  style="z-index:998;">

        <div class="popup-top-border"></div>
        
        <div style="align:right;"> 
            <a href="javascript:void(0)" class="popboxCloseButton" onclick='closeBpPopup()'></a>
        </div>
        
        <div class="LoadingSpinner" style="height:100%; width:100%; background-color: #D6D6D2; z-index:1500; opacity:0.8; position:absolute; display:none; text-align: center;">
        
            <img src="{!$Resource.SFDC_Loading}"/>
            <p>Loading...</p>
        
        </div>

        <div style="display: inline-block; width: 100%; margin-left: 25px;">

           <div class="popupHeader">Payment Method Details</div><br /><br />

           <div>
                
                <table style="margin-right:30px;">
                
                    <tr>
                        <td style="padding: 5px;"><label id = "paymentPopupLabel1"></label></td>
                        <td style="padding: 5px; width:40%;"><label class="paymentMethodLink" id = "paymentPopupLabelValue1"></label>
                            <label class="paymentMethodLinkError hide" id="paymentPopupLabelError1"><br />No billing history found</label>
                        </td>

                    </tr>
                    <tr>
                        <td style="padding: 5px;"><label id = "paymentPopupLabel2"></label></td>
                        <td style="padding: 5px; width:40%;"><label id = "paymentPopupLabelValue2"></label></td>
                    </tr>
                    <tr>
                        <td style="padding: 5px;"><label id = "paymentPopupLabel3"></label></td>
                        <td style="padding: 5px; width:40%;"><label id = "paymentPopupLabelValue3"></label></td>
                    </tr>
                    <tr>
                        <td style="padding: 5px;"><label id = "paymentPopupLabel4"></label></td>
                        <td style="padding: 5px; width:40%;"><label id = "paymentPopupLabelValue4"></label></td>
                    </tr>
                    <tr>
                        <td style="padding: 5px;"><label id = "paymentPopupLabel5"></label></td>
                        <td style="padding: 5px; width:40%;"><label id = "paymentPopupLabelValue5"></label></td>
                    </tr>
                    <tr>
                        <td style="padding: 5px;"><label id = "paymentPopupLabel6"></label></td>
                        <td style="padding: 5px; width:40%;"><label id = "paymentPopupLabelValue6"></label></td>
                    </tr>
                    <tr>
                        <td style="padding: 5px;" colspan="2"><label id = "paymentPopupErrorValue"></label></td>
                    </tr>
                    
                </table>
            </div>
            

        </div>

    </div>

    <!-- end Billing Profile Popup -->
    
</apex:component>